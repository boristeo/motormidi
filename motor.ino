#include <SPI.h>
#include <avr/pgmspace.h>

#define DIGIPOTSS_PIN 38

struct motor {
  int step_pin;
  int dir_pin;
  int en_pin;
  int ms1_pin;
  int ms2_pin;
  int digipot_ch;
  int digipot_current; // Values 0-255 (135 = ~0.75A, 185 = ~1A)

  void init() {
    pinMode(step_pin, OUTPUT);
    pinMode(dir_pin, OUTPUT);
    pinMode(en_pin, OUTPUT);
    pinMode(ms1_pin, OUTPUT);
    pinMode(ms2_pin, OUTPUT);
    pinMode(DIGIPOTSS_PIN, OUTPUT);
    this->power(0);
    this->set_mstep(0);
    SPI.begin();  // According to docs, this just sets pinmodes. Should be fine to do multiple times
    digitalWrite(DIGIPOTSS_PIN, HIGH);
    SPI.transfer(digipot_ch);  // Send the address and value via SPI
    SPI.transfer(digipot_current);
    digitalWrite(DIGIPOTSS_PIN, LOW);
  }

  void power(bool on) {
    digitalWrite(en_pin, !on);
  }

  void set_mstep(int mode) {
    // mstep mode is exponent of the divisor: mode 3 -> 1/8 steps
    digitalWrite(ms1_pin, mode & 1);
    digitalWrite(ms2_pin, mode & 2);
    delayMicroseconds(1);
  }

  void step() {
    digitalWrite(step_pin, 1);
    delayMicroseconds(1);
    digitalWrite(step_pin, 0);
    delayMicroseconds(1);
  }

  void set_dir(int dir) {
    digitalWrite(dir_pin, dir);
  }

  void reverse() {
    digitalWrite(dir_pin, !digitalRead(dir_pin));
  }
};

// All the motors
motor x{37,48,29,40,41,4,100};
motor y{36,49,28,69,39,5,100};
motor z{35,47,27,68,67,3,100};  // Board drives two Z motors in parallel
motor e0{34,43,26,65,66,0,135};
motor e1{33,42,25,63,64,1,135};

constexpr motor* channels[5] = {&x, &y, &z, &e0, &e1};  // For easy access
constexpr size_t num_channels = sizeof(channels) / sizeof(channels[0]);

// Simplified MIDI message. Delta time in milliseconds, note (Middle C = 60), channel
// Should pack very nicely to 4 bytes
struct __attribute__((packed)) minimidi {
  uint16_t dtime;
  uint8_t note;
  uint8_t channel; 
};
static_assert(sizeof(minimidi) == 4, "MIDI struct not packed correctly");
static_assert(alignof(minimidi) <= 4, "MIDI struct needs to have 4 byte alignment");

// MIDI composition goes here
// Stored in flash memory, pointer invalid for normal use. Must use pgm_read_* functions to fetch
constexpr minimidi midis[] PROGMEM {{392,57,2},{7,69,0},{58,0,2},{7,0,0},{58,57,2},{7,69,1},{58,0,2},{16,0,1},{50,57,2},{7,69,0},{58,0,2},{16,0,0},{50,57,2},{7,69,1},{58,0,2},{24,0,1},{42,57,2},{7,69,0},{58,0,2},{16,0,0},{50,57,2},{7,69,1},{58,0,2},{24,0,1},{42,57,2},{7,69,0},{58,0,2},{7,0,0},{58,62,2},{7,74,1},{58,0,2},{24,0,1},{42,57,2},{7,69,0},{58,0,2},{7,0,0},{58,57,2},{7,69,1},{58,0,2},{24,0,1},{42,57,2},{7,69,0},{58,0,2},{7,0,0},{58,62,2},{7,74,1},{58,0,2},{24,0,1},{42,57,2},{7,69,0},{58,0,2},{16,0,0},{50,57,2},{7,69,1},{58,0,2},{41,0,1},{25,57,2},{7,69,0},{58,0,2},{7,0,0},{58,53,2},{7,65,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{16,0,2},{58,0,0},{50,57,2},{7,69,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{16,0,2},{67,0,0},{41,62,2},{7,74,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{43,0,2},{26,0,0},{55,53,2},{7,65,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{43,0,2},{26,0,0},{55,52,2},{7,64,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,62,2},{7,74,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,61,2},{7,73,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,64,2},{7,76,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,52,2},{7,64,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,62,2},{7,74,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,61,2},{7,73,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,64,2},{7,76,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,50,2},{7,62,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,65,2},{7,77,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,57,2},{7,69,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,62,2},{7,74,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,50,2},{7,62,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,65,2},{7,77,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,57,2},{7,69,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,62,2},{7,74,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,48,2},{7,60,1},{81,0,2},{33,0,1},{11,64,2},{7,76,0},{56,0,2},{26,0,0},{42,64,2},{7,76,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,57,2},{7,69,1},{81,0,2},{33,0,1},{11,64,2},{7,76,0},{56,0,2},{26,0,0},{42,60,2},{7,72,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,48,2},{7,60,1},{81,0,2},{33,0,1},{11,64,2},{7,76,0},{56,0,2},{26,0,0},{42,64,2},{7,76,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,57,2},{7,69,1},{81,0,2},{33,0,1},{11,64,2},{7,76,0},{56,0,2},{26,0,0},{42,60,2},{7,72,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,47,2},{7,59,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,59,2},{7,71,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,56,2},{7,68,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,59,2},{7,71,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,52,2},{7,64,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,56,2},{7,68,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,59,2},{7,71,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,56,2},{7,68,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,47,2},{7,59,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,59,2},{7,71,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,56,2},{7,68,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,59,2},{7,71,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,40,2},{7,52,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,56,2},{7,68,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,59,2},{7,71,1},{81,0,2},{33,0,1},{11,62,2},{7,74,0},{56,0,2},{26,0,0},{42,56,2},{7,68,1},{81,0,2},{33,0,1},{11,57,2},{7,69,0},{56,0,2},{26,0,0},{42,33,2},{7,72,0},{0,45,1},{56,0,2},{33,0,1},{35,45,2},{7,57,1},{56,0,2},{33,0,1},{35,48,2},{7,60,1},{56,0,2},{33,0,1},{35,45,2},{7,57,1},{3,0,0},{53,0,2},{33,0,1},{35,33,2},{7,64,0},{0,45,1},{56,0,2},{33,0,1},{35,45,2},{7,57,1},{56,0,0},{0,0,2},{33,0,1},{43,72,0},{0,60,1},{8,48,2},{64,0,2},{16,0,1},{35,45,2},{7,57,1},{56,0,0},{0,0,2},{33,0,1},{35,31,2},{7,71,0},{0,43,1},{56,0,2},{33,0,1},{35,43,2},{7,55,1},{56,0,0},{0,0,2},{33,0,1},{43,59,0},{0,59,1},{8,47,2},{64,0,2},{16,0,1},{35,43,2},{7,55,1},{56,0,0},{0,0,2},{33,0,1},{35,31,2},{7,64,0},{0,43,1},{56,0,2},{33,0,1},{35,43,2},{7,55,1},{56,0,0},{0,0,2},{33,0,1},{43,71,0},{0,59,1},{0,47,2},{65,0,2},{24,0,1},{35,43,2},{7,55,1},{56,0,0},{0,0,2},{33,0,1},{35,29,2},{7,69,0},{0,41,1},{56,0,2},{33,0,1},{35,41,2},{7,53,1},{56,0,0},{0,0,2},{33,0,1},{35,45,2},{7,59,0},{0,57,1},{56,0,2},{33,0,1},{35,41,2},{7,53,1},{56,0,0},{0,0,2},{33,0,1},{35,29,2},{7,62,0},{0,41,1},{56,0,2},{33,0,1},{35,41,2},{7,53,1},{56,0,0},{0,0,2},{33,0,1},{35,45,2},{7,69,0},{0,57,1},{56,0,2},{33,0,1},{35,41,2},{7,53,1},{56,0,0},{0,0,2},{33,0,1},{35,28,2},{7,76,0},{0,40,1},{56,0,2},{33,0,1},{35,40,2},{7,52,1},{56,0,0},{0,0,2},{33,0,1},{35,44,2},{7,74,0},{0,56,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,72,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,28,2},{7,71,0},{0,40,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,72,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,45,2},{7,69,0},{0,57,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,71,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,28,2},{7,76,0},{0,40,1},{56,0,2},{33,0,1},{35,40,2},{7,52,1},{56,0,0},{0,0,2},{33,0,1},{35,44,2},{7,74,0},{0,56,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,72,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,28,2},{7,71,0},{0,40,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,72,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,45,2},{7,69,0},{0,57,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,71,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,28,2},{7,76,0},{0,40,1},{56,0,2},{33,0,1},{35,40,2},{7,52,1},{56,0,0},{0,0,2},{33,0,1},{35,44,2},{7,74,0},{0,56,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,72,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,28,2},{7,71,0},{0,40,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,72,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,45,2},{7,69,0},{0,57,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,71,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,28,2},{7,76,0},{0,40,1},{56,0,2},{33,0,1},{35,40,2},{7,52,1},{56,0,0},{0,0,2},{33,0,1},{35,44,2},{7,74,0},{0,56,1},{26,0,0},{6,76,0},{23,0,2},{3,0,0},{6,74,0},{23,0,1},{18,0,0},{16,40,2},{7,72,0},{0,52,1},{56,0,2},{33,0,1},{17,0,0},{17,28,2},{7,71,0},{0,40,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,72,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{35,45,2},{7,69,0},{0,57,1},{56,0,2},{26,0,0},{6,0,1},{35,40,2},{7,71,0},{0,52,1},{56,0,2},{26,0,0},{6,0,1},{43,77,0},{0,40,1},{16,28,2},{783,0,2},{36,0,1},{222,41,2},{7,53,1},{15,0,2},{33,0,1},{10,38,2},{7,50,1},{15,0,2},{33,0,1},{10,35,2},{7,47,1},{15,0,2},{33,0,1},{10,38,2},{7,50,1},{15,0,2},{33,0,1},{10,41,2},{7,53,1},{15,0,2},{33,0,1},{10,44,2},{7,56,1},{15,0,2},{33,0,1},{10,47,2},{7,59,1},{3,0,0},{12,0,2},{33,0,1},{10,50,2},{7,62,1},{600,83,0},{733,0,2},{60,0,0},{23,81,0},{26,0,0},{11,80,0},{26,0,0},{11,78,0},{24,0,1},{2,0,0},{11,76,0},{26,0,0},{11,74,0},{26,0,0},{11,72,0},{26,0,0},{26,33,2},{7,72,0},{0,45,1},{83,0,0},{50,76,0},{30,0,2},{33,0,1},{20,0,0},{42,35,2},{7,81,0},{0,47,1},{83,0,0},{50,79,0},{30,0,2},{33,0,1},{20,0,0},{42,36,2},{7,77,0},{0,48,1},{83,0,0},{50,76,0},{30,0,2},{33,0,1},{20,0,0},{42,33,2},{7,74,0},{0,45,1},{83,0,0},{50,72,0},{30,0,2},{33,0,1},{20,0,0},{42,38,2},{7,77,0},{0,50,1},{83,0,0},{50,76,0},{30,0,2},{33,0,1},{20,0,0},{42,40,2},{7,74,0},{0,52,1},{83,0,0},{50,72,0},{30,0,2},{33,0,1},{20,0,0},{42,41,2},{7,71,0},{0,53,1},{83,0,0},{50,72,0},{30,0,2},{33,0,1},{20,0,0},{42,38,2},{7,69,0},{0,50,1},{83,0,0},{50,71,0},{30,0,2},{33,0,1},{20,0,0},{42,40,2},{7,72,0},{0,52,1},{42,0,0},{24,71,0},{42,0,0},{24,72,0},{42,0,0},{24,71,0},{283,0,2},{33,0,1},{8,28,2},{7,40,1},{232,0,0},{34,69,0},{110,0,2},{33,0,1},{46,0,0},{68,33,2},{7,69,0},{0,45,1},{1150,0,2},{33,0,1},{10,0,0},};
constexpr size_t num_midis = sizeof(midis) / sizeof(midis[0]);


// Lookup table for time between pulses for all midi notes. 8Hz-12.5kHz. MIDI designers knew what they were doing
constexpr const size_t period_for_midi_note[128] = {122312,115447,108967,102851,97079,91630,86487,81633,77051,72727,68645,64792,61156,57723,54483,51425,48539,45815,43243,40816,38525,36363,34322,32396,30578,28861,27241,25712,24269,22907,21621,20408,19262,18181,17161,16198,15289,14430,13620,12856,12134,11453,10810,10204,9631,9090,8580,8099,7644,7215,6810,6428,6067,5726,5405,5102,4815,4545,4290,4049,3822,3607,3405,3214,3033,2863,2702,2551,2407,2272,2145,2024,1911,1803,1702,1607,1516,1431,1351,1275,1203,1136,1072,1012,955,901,851,803,758,715,675,637,601,568,536,506,477,450,425,401,379,357,337,318,300,284,268,253,238,225,212,200,189,178,168,159,150,142,134,126,119,112,106,100,94,89,84,79,};

void setup() {
  Serial.begin(115200);
  do {} while(!Serial);
  // Init all motors
  for (auto i = 0; i < num_channels; ++i) {
    channels[i]->init();
    channels[i]->set_mstep(0);
  }
}

void loop() {
  minimidi m;  // Current message. To be filled from PROGMEM
  auto midi_clock = millis();
  volatile size_t intrvls[num_channels];
  volatile size_t lastbip[num_channels];

  for (auto i = 0; i < num_midis; ++i) {
    *(uint32_t*)(&m) = pgm_read_dword(&midis[i]);
    auto note = m.note;
    auto channel = m.channel;
    auto time = m.dtime;
    auto note_period = period_for_midi_note[note];

    for (;;) {
      size_t curmillis = millis();  // For some reason micros is unstable over longer times?
      if (curmillis - midi_clock >= time) {
        midi_clock = curmillis;
        break;
      }
      size_t curmicros = micros();
      for (auto ch = 0; ch < num_channels; ++ch) {
        if (curmicros - lastbip[ch] >= intrvls[ch]) {
          channels[ch]->step();
          lastbip[ch] = curmicros;
        }
      }

    }
    intrvls[channel] = note_period;
    channels[channel]->power(note);  // Use note 0 as note_off. Subsonic anyway
    if (note % 2)
      channels[channel]->reverse();  // Optional. Looks cool IMO
  }

  for (auto i = 0; i < num_channels; ++i)
    channels[i]->power(0);  // Disable just in case

  delay(3000); // Pause before playing again
}
